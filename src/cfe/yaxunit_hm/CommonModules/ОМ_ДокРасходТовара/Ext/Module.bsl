#Область СлужебныйПрограммныеИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
	
	ЮТТесты
		.ДобавитьТестовыйНабор("Проверка записи документов ПриходТовара, РасходТовара", 
								"Запись, ПриходТовара, РасходТовара").ВТранзакции()
			.ДобавитьТест("ПроверкаСозданияДок_ПриходТовара", "Запись ПриходТовара", "Позитив")
			.ДобавитьТест("ПроверкаСозданияДок_РасходТовара", "Запись РасходТовара", "Позитив") 
			
		.ДобавитьТестовыйНабор("Проверка Проведения документов ПриходТовара, РасходТовара", 
								"Проведение, ПриходТовара, РасходТовара").ВТранзакции()
			.ДобавитьТест("ПроверкаПроведенияДок_ПриходТовара", "Проведение ПриходТовара", "Позитив")
			.ДобавитьТест("ПроверкаПроведенияДок_РасходТовара", "Проведение РасходТовара", "Позитив")
			.ДобавитьТест("ПроверкаПроведенияДок_РасходТовара_Негатив", "Проведение РасходТовара", "Негатив")
			
		.ДобавитьТестовыйНабор("Проверка движений по РН ТоварныеЗапасы", "Движения, ТоварныеЗапасы")
			.ДобавитьТест("ПроверкаДвиженийДок_ПриходТовара_РН_ТоварныеЗапасы", "ПриходТовара", "Позитив")
			.ДобавитьТест("ПроверкаДвиженийДок_РасходТовара_РН_ТоварныеЗапасы", "РасходТовара", "Позитив") 
			
		.ДобавитьТестовыйНабор("Проверка движений по РН Взаиморасчеты", "Движения, Взаиморасчеты")
			.ДобавитьТест("ПроверкаДвиженийДок_ПриходТовара_РН_ТоварныеЗапасы", "ПриходТовара", "Позитив")
			.ДобавитьТест("ПроверкаДвиженийДок_РасходТовара_РН_ТоварныеЗапасы", "РасходТовара", "Позитив")
			
		.ДобавитьТестовыйНабор("Проверка движений по РН Продажи", "Движения, Продажи")
			.ДобавитьТест("ПроверкаДвиженийДок_ПриходТовара_РН_ТоварныеЗапасы", "ПриходТовара", "Позитив")
			.ДобавитьТест("ПроверкаДвиженийДок_РасходТовара_РН_ТоварныеЗапасы", "РасходТовара", "Позитив")
			
		.ДобавитьТестовыйНабор("Проверка остатков по РН РасходТовара", "Остатки, РасходТовара")
			.ДобавитьТест("ПроверкаОстатков_РН_ТоварныеЗапасы", , "Позитив")
			.ДобавитьТест("ПроверкаДвиженийДок_РасходТовара_РН_ТоварныеЗапасы", , "Негатив")

	;
					
КонецПроцедуры

Процедура ПроверкаСозданияДок_ПриходТовара() Экспорт
	
	// 1. Подготовка параметров и генерация данных для выполнения функции.
	
	Фикция	= Истина;
	
	// 2. Выполнение функции.
	
	Конструктор = Конструктор_Док_ПриходТовара(Фикция);
	ДокументОбъект = Конструктор.Записать(Истина);
	
	// 3. Проверка результата.
	
	ЮТест.ОжидаетЧто(ДокументОбъект)
		.ИмеетТип("ДокументОбъект.ПриходТовара")
		.Метод("Записать").Параметр(РежимЗаписиДокумента.Запись)
		.НеВыбрасываетИсключение()
		;				
		
КонецПроцедуры
	
Процедура ПроверкаСозданияДок_РасходТовара() Экспорт
	
	// 1. Подготовка параметров и генерация данных для выполнения функции.
	
	Фикция	= Истина;
	
	// 2. Выполнение функции.
	
	Конструктор = Конструктор_Док_РасходТовара(Фикция);
	
	ДокументОбъект = Конструктор.Записать(Истина);
	
	// 3. Проверка результата.
	
	ЮТест.ОжидаетЧто(ДокументОбъект)
		.ИмеетТип("ДокументОбъект.РасходТовара")
		.Метод("Записать").Параметр(РежимЗаписиДокумента.Запись)
		.НеВыбрасываетИсключение()
		;				
		
КонецПроцедуры
	
Процедура ПроверкаПроведенияДок_ПриходТовара() Экспорт
	
	// 1. Подготовка параметров и генерация данных для выполнения функции.
	
	Фикция	= Истина;
	
	// 2. Выполнение функции.
	
	Конструктор = Конструктор_Док_ПриходТовара(Фикция);
	
	ДокументОбъект = Конструктор.Провести(Истина);
	
	// 3. Проверка результата.
	
	ЮТест.ОжидаетЧто(ДокументОбъект)
		.ИмеетТип("ДокументОбъект.ПриходТовара")
		.Метод("Записать").Параметр(РежимЗаписиДокумента.Проведение)
		.НеВыбрасываетИсключение()
		;
		
КонецПроцедуры
	
Процедура ПроверкаПроведенияДок_РасходТовара() Экспорт
	
	// 1. Подготовка параметров и генерация данных для выполнения функции.
	
	Фикция	= Истина; 
	
	// 2. Выполнение функции.
	
	Конструктор = Конструктор_Док_РасходТовара(Фикция);
	
	ДокументОбъект = Конструктор.Провести(Истина); 
	
	// 3. Проверка результата.
	
	ЮТест.ОжидаетЧто(ДокументОбъект)
		.ИмеетТип("ДокументОбъект.РасходТовара")
		.Метод("Записать").Параметр(РежимЗаписиДокумента.Проведение)
		.НеВыбрасываетИсключение()
		;		
	
КонецПроцедуры
	
Процедура ПроверкаПроведенияДок_РасходТовара_Негатив() Экспорт
	
	// 1. Подготовка параметров и генерация данных для выполнения функции.
	
	Фикция	= Истина;
	
	// 2. Выполнение функции.
	
	Конструктор = Конструктор_Док_РасходТовара(Фикция);
	
	ДокументОбъект = Конструктор.Провести(Истина); 
	
	// 3. Проверка результата. 
	    //Исключения не выбрасывает
		
	ЮТест.ОжидаетЧто(ДокументОбъект)
	.ИмеетТип("ДокументОбъект.РасходТовара")
	.Метод("Записать").Параметр(РежимЗаписиДокумента.Проведение).Параметр(РежимПроведенияДокумента.Оперативный)
	.НеВыбрасываетИсключение()
	;
		
КонецПроцедуры
	
Процедура ПроверкаДвиженийДок_ПриходТовара_РН_ТоварныеЗапасы() Экспорт

	// 1. Подготовка параметров и генерация данных для выполнения функции.
	
	Параметры = СозданиеПарамтеровДляДокументов();
	
	ДокументСсылка = Конструктор_Док_ПриходТовара(, Параметры).Провести();
	
	// 2. Выполнение функции.
	
	Запись = ЮТЗапросы.Запись("РегистрНакопления.ТоварныеЗапасы",
		ЮТест.Предикат()
			.Реквизит("Регистратор").Равно(ДокументСсылка));
			
	// 3. Проверка результата. 
	
	ЮТест.ОжидаетЧто(Запись)
	.Свойство("Регистратор").Равно(ДокументСсылка)
	.Свойство("ВидДвижения").Равно(ВидДвиженияНакопления.Приход)
	.Свойство("Товар").Равно(Параметры.Товар)
	.Свойство("Склад").Равно(Параметры.Склад)
	.Свойство("Количество").Равно(Параметры.Количество)
	;

КонецПроцедуры

Процедура ПроверкаДвиженийДок_РасходТовара_РН_ТоварныеЗапасы() Экспорт
	
	// 1. Подготовка параметров и генерация данных для выполнения функции.
	
	Параметры = СозданиеПарамтеровДляДокументов();
	
	ДокументСсылка = Конструктор_Док_РасходТовара(, Параметры).Провести();
	
	// 2. Выполнение функции.
	
	Запись = ЮТЗапросы.Запись("РегистрНакопления.ТоварныеЗапасы",
		ЮТест.Предикат()
			.Реквизит("Регистратор").Равно(ДокументСсылка));
			
	// 3. Проверка результата. 
	
	ЮТест.ОжидаетЧто(Запись)
	.Свойство("Регистратор").Равно(ДокументСсылка)
	.Свойство("ВидДвижения").Равно(ВидДвиженияНакопления.Расход)
	.Свойство("Товар").Равно(Параметры.Товар)
	.Свойство("Склад").Равно(Параметры.Склад)
	.Свойство("Количество").Равно(Параметры.Количество)
	;

КонецПроцедуры

Процедура ПроверкаДвиженийДок_ПриходТовара_РН_Продажи() Экспорт
	
	// 1. Подготовка параметров и генерация данных для выполнения функции.
	
	Параметры = СозданиеПарамтеровДляДокументов(); 
	
	ДокументСсылка = Конструктор_Док_ПриходТовара(, Параметры).Провести();
	
	// 2. Выполнение функции.
	
	Запись = ЮТЗапросы.Запись("РегистрНакопления.Продажи",
		ЮТест.Предикат()
			.Реквизит("Регистратор").Равно(ДокументСсылка));
			
	// 3. Проверка результата. 
	
	ЮТест.ОжидаетЧто(Запись)
	.Свойство("Регистратор").Равно(ДокументСсылка)
	.Свойство("Покупатель").Равно(Параметры.Контрагент)
	.Свойство("Товар").Равно(Параметры.Товар)
	.Свойство("Количество").Равно(Параметры.Количество)
	.Свойство("Сумма").Равно(Параметры.Сумма)
	;

КонецПроцедуры

Процедура ПроверкаДвиженийДок_РасходТовара_РН_Продажи() Экспорт
	
	// 1. Подготовка параметров и генерация данных для выполнения функции.
	
	Параметры = СозданиеПарамтеровДляДокументов(); 
	
	ДокументСсылка = Конструктор_Док_РасходТовара(, Параметры).Провести();
	
	// 2. Выполнение функции.
	
	Запись = ЮТЗапросы.Запись("РегистрНакопления.Продажи",
		ЮТест.Предикат()
			.Реквизит("Регистратор").Равно(ДокументСсылка));
			
	// 3. Проверка результата. 
	
	ЮТест.ОжидаетЧто(Запись)
	.Свойство("Регистратор").Равно(ДокументСсылка)
	.Свойство("Покупатель").Равно(Параметры.Контрагент)
	.Свойство("Товар").Равно(Параметры.Товар)
	.Свойство("Количество").Равно(Параметры.Количество)
	.Свойство("Сумма").Равно(Параметры.Сумма)
	;

КонецПроцедуры

Процедура ПроверкаДвиженийДок_ПриходТовара_РН_Взаиморасчеты() Экспорт
	
	// 1. Подготовка параметров и генерация данных для выполнения функции.
	
	Параметры = СозданиеПарамтеровДляДокументов(); 
	
	ДокументСсылка = Конструктор_Док_ПриходТовара(, Параметры).Провести();
	
	// 2. Выполнение функции.
	
	Запись = ЮТЗапросы.Запись("РегистрНакопления.Взаиморасчеты",
		ЮТест.Предикат()
			.Реквизит("Регистратор").Равно(ДокументСсылка));
			
	// 3. Проверка результата. 
	
	ЮТест.ОжидаетЧто(Запись)
	.Свойство("Регистратор").Равно(ДокументСсылка)
	.Свойство("ВидДвижения").Равно(ВидДвиженияНакопления.Приход)
	.Свойство("Контрагент").Равно(Параметры.Контрагент)
	.Свойство("Валюта").Равно(Параметры.Валюта)
	.Свойство("Сумма").Равно(Параметры.Сумма)
	;

КонецПроцедуры

Процедура ПроверкаДвиженийДок_РасходТовара_РН_Взаиморасчеты() Экспорт
	
	// 1. Подготовка параметров и генерация данных для выполнения функции.
	
	Параметры = СозданиеПарамтеровДляДокументов(); 
	
	ДокументСсылка = Конструктор_Док_РасходТовара(, Параметры).Провести();
	
	// 2. Выполнение функции.
	
	Запись = ЮТЗапросы.Запись("РегистрНакопления.Взаиморасчеты",
		ЮТест.Предикат()
			.Реквизит("Регистратор").Равно(ДокументСсылка));
			
	// 3. Проверка результата. 
	
	ЮТест.ОжидаетЧто(Запись)
	.Свойство("Регистратор").Равно(ДокументСсылка)
	.Свойство("ВидДвижения").Равно(ВидДвиженияНакопления.Расход)
	.Свойство("Контрагент").Равно(Параметры.Контрагент)
	.Свойство("Валюта").Равно(Параметры.Валюта)
	.Свойство("Сумма").Равно(Параметры.Сумма)
	;

КонецПроцедуры

Процедура ПроверкаОстатков_РН_ТоварныеЗапасы() Экспорт
	
	// 1. Подготовка параметров и генерация данных для выполнения функции.
	
	Параметры = СозданиеПарамтеровДляДокументов();
	
	ДокументСсылкаПриход = Конструктор_Док_ПриходТовара(, Параметры).Провести();
	ДокументСсылкаРасход = Конструктор_Док_РасходТовара(, Параметры).Провести();
	
	// 2. Выполнение функции.
	
	ОписаниеЗапроса = ЮТЗапросы.ОписаниеЗапроса();
	ОписаниеЗапроса.ИмяТаблицы = "РегистрНакопления.ТоварныеЗапасы.Остатки";
	ОписаниеЗапроса.Условия.Добавить("Товар = &Товар");
	ОписаниеЗапроса.Условия.Добавить("Склад = &Склад");
	ОписаниеЗапроса.ЗначенияПараметров.Вставить("Товар", Параметры.Товар);
	ОписаниеЗапроса.ЗначенияПараметров.Вставить("Склад", Параметры.Склад);
	ОписаниеЗапроса.ВыбираемыеПоля.Добавить("Склад");
	ОписаниеЗапроса.ВыбираемыеПоля.Добавить("Товар");
   	ОписаниеЗапроса.ВыбираемыеПоля.Добавить("КоличествоОстаток");
	РезультатЗапроса = ЮТЗапросы.РезультатЗапроса(ОписаниеЗапроса);	
	
	
	// 3. Проверка результата.
	ЮТест.ОжидаетЧто(РезультатЗапроса)
	.НеЗаполнено()
	;
	
КонецПроцедуры

Процедура ПроверкаОстатков_РН_ТоварныеЗапасы_Негатив() Экспорт
	
	// 1. Подготовка параметров и генерация данных для выполнения функции.
	
	Параметры = СозданиеПарамтеровДляДокументов();
	
	ДокументСсылкаПриход = Конструктор_Док_ПриходТовара(, Параметры).Провести();
	
	Параметры.Количество = 11; 
	
	ДокументСсылкаРасход = Конструктор_Док_РасходТовара(, Параметры).Провести();
	
	// 2. Выполнение функции.
	
	ОписаниеЗапроса = ЮТЗапросы.ОписаниеЗапроса();
	ОписаниеЗапроса.ИмяТаблицы = "РегистрНакопления.ТоварныеЗапасы.Остатки";
	ОписаниеЗапроса.Условия.Добавить("Товар = &Товар");
	ОписаниеЗапроса.Условия.Добавить("Склад = &Склад");
	ОписаниеЗапроса.ЗначенияПараметров.Вставить("Товар", Параметры.Товар);
	ОписаниеЗапроса.ЗначенияПараметров.Вставить("Склад", Параметры.Склад);
	ОписаниеЗапроса.ВыбираемыеПоля.Добавить("Склад");
	ОписаниеЗапроса.ВыбираемыеПоля.Добавить("Товар");
   	ОписаниеЗапроса.ВыбираемыеПоля.Добавить("КоличествоОстаток");
	РезультатЗапроса = ЮТЗапросы.РезультатЗапроса(ОписаниеЗапроса);	
	
	
	// 3. Проверка результата.
	ЮТест.ОжидаетЧто(РезультатЗапроса)
	.Свойство("[0].Товар").Равно(Параметры.Товар)
	.Свойство("[0].Склад").Равно(Параметры.Склад)
	.Свойство("[0].КоличествоОстаток").Равно(-1)
	;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция Конструктор_Док_ПриходТовара(Фикция = Ложь,
										Параметры = Неопределено)
	Если Фикция Тогда
		Возврат Конструктор_Док_Фикция("ПриходТовара");
	КонецЕсли;

	
	Возврат ЮТест.Данные().КонструкторОбъекта("Документ.ПриходТовара")
		.ФикцияОбязательныхПолей() 
		.Установить("Дата", ТекущаяДатаСеанса())
		.Установить("Поставщик", Параметры.Контрагент) 
		.Установить("Склад", Параметры.Склад) 
		.Установить("Валюта", Справочники.Валюты.НайтиПоКоду("000000001")) 
		.Установить("Организация", Справочники.Организации.НайтиПоКоду("000000001"))
			.ТабличнаяЧасть("Товары")
				.ДобавитьСтроку()
					.Установить("Товар", Параметры.Товар) 
					.Установить("Цена", Параметры.Цена) 
					.Установить("Количество", Параметры.Количество) 
					.Установить("Сумма", Параметры.Сумма);
		
КонецФункции
				
Функция Конструктор_Док_РасходТовара(Фикция = Ложь,
										Параметры = Неопределено)
	
	Если Фикция Тогда
		Возврат Конструктор_Док_Фикция("РасходТовара");
	КонецЕсли;
		
	
	Возврат ЮТест.Данные().КонструкторОбъекта("Документ.РасходТовара")
	.ФикцияОбязательныхПолей() 
	.Установить("Дата", ТекущаяДатаСеанса())
	.Установить("Покупатель", Параметры.Контрагент) 
	.Установить("Склад", Параметры.Склад) 
	.Установить("Валюта", Справочники.Валюты.НайтиПоКоду("000000001")) 
	.Установить("ВидЦен", Справочники.ВидыЦен.НайтиПоКоду("000000001")) 
	.Установить("Организация", Справочники.Организации.НайтиПоКоду("000000001"))
		.ТабличнаяЧасть("Товары")
			.ДобавитьСтроку()
				.Установить("Товар", Параметры.Товар) 
				.Установить("Цена", Параметры.Цена) 
				.Установить("Количество", Параметры.Количество) 
				.Установить("Сумма", Параметры.Сумма);

КонецФункции

Функция Конструктор_Док_Фикция(ТипДокумента)
									
	Возврат ЮТест.Данные().КонструкторОбъекта(СтрШаблон("Документ.%1", ТипДокумента))
	.ФикцияОбязательныхПолей()
	.Установить("Дата", ТекущаяДатаСеанса())
	.ТабличнаяЧасть("Товары")
		.ДобавитьСтроку()
			.ФикцияОбязательныхПолей();

КонецФункции

Функция СоздатьКонтрагента()
	
	Возврат ЮТест.Данные().КонструкторОбъекта("Справочник.Контрагенты")
		.ФикцияОбязательныхПолей()
		.Записать()
		;
		
КонецФункции

Функция СоздатьСклад()
	
	Возврат ЮТест.Данные().КонструкторОбъекта("Справочник.Склады")
		.ФикцияОбязательныхПолей() 
		.Записать()
		;
	
КонецФункции

Функция СоздатьТовар()
	
	Возврат ЮТест.Данные().КонструкторОбъекта("Справочник.Товары")
		.ФикцияОбязательныхПолей()
		.Записать()
		;

КонецФункции
	
Функция СозданиеПарамтеровДляДокументов(Количество = 10, Цена = 100)
	
	Возврат Новый Структура("Контрагент, Склад, Товар, Цена, Количество, Сумма",	
				СоздатьКонтрагента(), СоздатьСклад(), СоздатьТовар(), 100, 10, Количество * Цена);
				
КонецФункции

#КонецОбласти